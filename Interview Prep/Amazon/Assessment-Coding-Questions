Question 1:

Amazon ships millions of parcels to customers across the globe every day. In a given center, there are n types of products to be shipped, and the quantity of parcels for each product type is denoted by quantity[i] for the i-th product type.

A truck can carry a maximum of capacity parcels in total, but it cannot carry more than maxParcelsSameType parcels of the same type. Your task is to find the minimum number of trucks needed to ship all the parcels for all types of products, respecting these constraints.

Input:
An integer n, representing the number of product types (1 ≤ n ≤ 10^5).
An array quantity[] of size n, where quantity[i] (1 ≤ quantity[i] ≤ 10^5) represents the number of parcels of product type i.
An integer capacity, representing the maximum capacity of any truck (1 ≤ capacity ≤ 10^5).
An integer maxParcelsSameType, representing the maximum number of parcels of the same type that can be on the truck (1 ≤ maxParcelsSameType ≤ 10^5).

Output:
A long integer representing the minimum number of trucks required.


Question 2: 

Problem:

Given two passwords, one generated by the customer (S) and the other generated by the internal system (T), we need to determine how many secured variations of the customer password exist, modulo 10^9 + 7


A secured variation of the password is defined as a subsequence of the customer password (S) which is lexicographically greater than the system-generated password (T).

Formally, if the customer’s password is S and the system-generated password is T, we are tasked to count how many subsequences of S are lexicographically greater than T. Since the answer can be large, return the result modulo 10^9 + 7

Input:
A string S (1 ≤ |S| ≤ 10^5), the customer’s password.
A string T (1 ≤ |T| ≤ 10^5), the system-generated password.
Output:
An integer representing the number of subsequences of S that are lexicographically greater than T, modulo 10^9 + 7